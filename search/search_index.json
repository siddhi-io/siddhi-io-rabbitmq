{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi IO RabbitMQ The siddhi-io-rabbitmq is an extension to Siddhi that publish and receive events from rabbitmq broker. For information on Siddhi and it's features refer Siddhi Documentation . Downloads Versions 3.x and above with group id io.siddhi.extension.* from here . Versions 2.x and lower with group id org.wso2.extension.siddhi. from here . Latest API Docs Latest API Docs is 3.0.7 . Features rabbitmq ( Sink ) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol rabbitmq ( Source ) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Dependencies There are no other dependencies needed for this extension. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-io-rabbitmq","text":"The siddhi-io-rabbitmq is an extension to Siddhi that publish and receive events from rabbitmq broker. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi IO RabbitMQ"},{"location":"#downloads","text":"Versions 3.x and above with group id io.siddhi.extension.* from here . Versions 2.x and lower with group id org.wso2.extension.siddhi. from here .","title":"Downloads"},{"location":"#latest-api-docs","text":"Latest API Docs is 3.0.7 .","title":"Latest API Docs"},{"location":"#features","text":"rabbitmq ( Sink ) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol rabbitmq ( Source ) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol.","title":"Features"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2017 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/1.0.14/","text":"API Docs - v1.0.14 Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"1.0.14"},{"location":"api/1.0.14/#api-docs-v1014","text":"","title":"API Docs - v1.0.14"},{"location":"api/1.0.14/#sink","text":"","title":"Sink"},{"location":"api/1.0.14/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/1.0.14/#source","text":"","title":"Source"},{"location":"api/1.0.14/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/1.0.15/","text":"API Docs - v1.0.15 Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"1.0.15"},{"location":"api/1.0.15/#api-docs-v1015","text":"","title":"API Docs - v1.0.15"},{"location":"api/1.0.15/#sink","text":"","title":"Sink"},{"location":"api/1.0.15/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/1.0.15/#source","text":"","title":"Source"},{"location":"api/1.0.15/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/1.0.16/","text":"API Docs - v1.0.16 Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"1.0.16"},{"location":"api/1.0.16/#api-docs-v1016","text":"","title":"API Docs - v1.0.16"},{"location":"api/1.0.16/#sink","text":"","title":"Sink"},{"location":"api/1.0.16/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/1.0.16/#source","text":"","title":"Source"},{"location":"api/1.0.16/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/1.0.17/","text":"API Docs - v1.0.17 Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"1.0.17"},{"location":"api/1.0.17/#api-docs-v1017","text":"","title":"API Docs - v1.0.17"},{"location":"api/1.0.17/#sink","text":"","title":"Sink"},{"location":"api/1.0.17/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/1.0.17/#source","text":"","title":"Source"},{"location":"api/1.0.17/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/1.0.18/","text":"API Docs - v1.0.18 Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"1.0.18"},{"location":"api/1.0.18/#api-docs-v1018","text":"","title":"API Docs - v1.0.18"},{"location":"api/1.0.18/#sink","text":"","title":"Sink"},{"location":"api/1.0.18/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/1.0.18/#source","text":"","title":"Source"},{"location":"api/1.0.18/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/1.0.19/","text":"API Docs - v1.0.19 Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"1.0.19"},{"location":"api/1.0.19/#api-docs-v1019","text":"","title":"API Docs - v1.0.19"},{"location":"api/1.0.19/#sink","text":"","title":"Sink"},{"location":"api/1.0.19/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/1.0.19/#source","text":"","title":"Source"},{"location":"api/1.0.19/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/1.0.20/","text":"API Docs - v1.0.20 Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"1.0.20"},{"location":"api/1.0.20/#api-docs-v1020","text":"","title":"API Docs - v1.0.20"},{"location":"api/1.0.20/#sink","text":"","title":"Sink"},{"location":"api/1.0.20/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/1.0.20/#source","text":"","title":"Source"},{"location":"api/1.0.20/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/1.1.0/","text":"API Docs - v1.1.0 Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"1.1.0"},{"location":"api/1.1.0/#api-docs-v110","text":"","title":"API Docs - v1.1.0"},{"location":"api/1.1.0/#sink","text":"","title":"Sink"},{"location":"api/1.1.0/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/1.1.0/#source","text":"","title":"Source"},{"location":"api/1.1.0/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/1.1.1/","text":"API Docs - v1.1.1 Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"1.1.1"},{"location":"api/1.1.1/#api-docs-v111","text":"","title":"API Docs - v1.1.1"},{"location":"api/1.1.1/#sink","text":"","title":"Sink"},{"location":"api/1.1.1/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/1.1.1/#source","text":"","title":"Source"},{"location":"api/1.1.1/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/2.0.0/","text":"API Docs - v2.0.0 Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"2.0.0"},{"location":"api/2.0.0/#api-docs-v200","text":"","title":"API Docs - v2.0.0"},{"location":"api/2.0.0/#sink","text":"","title":"Sink"},{"location":"api/2.0.0/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/2.0.0/#source","text":"","title":"Source"},{"location":"api/2.0.0/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/3.0.0/","text":"API Docs - v3.0.0 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"3.0.0"},{"location":"api/3.0.0/#api-docs-v300","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.0"},{"location":"api/3.0.0/#sink","text":"","title":"Sink"},{"location":"api/3.0.0/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/3.0.0/#source","text":"","title":"Source"},{"location":"api/3.0.0/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/3.0.1/","text":"API Docs - v3.0.1 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"3.0.1"},{"location":"api/3.0.1/#api-docs-v301","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.1"},{"location":"api/3.0.1/#sink","text":"","title":"Sink"},{"location":"api/3.0.1/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/3.0.1/#source","text":"","title":"Source"},{"location":"api/3.0.1/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/3.0.2/","text":"API Docs - v3.0.2 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"3.0.2"},{"location":"api/3.0.2/#api-docs-v302","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.2"},{"location":"api/3.0.2/#sink","text":"","title":"Sink"},{"location":"api/3.0.2/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/3.0.2/#source","text":"","title":"Source"},{"location":"api/3.0.2/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/3.0.3/","text":"API Docs - v3.0.3 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , auto.ack= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No auto.ack If this parameter is set to false , the server should expect explicit messages acknowledgements once delivered true BOOL Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"3.0.3"},{"location":"api/3.0.3/#api-docs-v303","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.3"},{"location":"api/3.0.3/#sink","text":"","title":"Sink"},{"location":"api/3.0.3/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/3.0.3/#source","text":"","title":"Source"},{"location":"api/3.0.3/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , auto.ack= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No auto.ack If this parameter is set to false , the server should expect explicit messages acknowledgements once delivered true BOOL Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/3.0.4/","text":"API Docs - v3.0.4 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , auto.ack= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No auto.ack If this parameter is set to false , the server should expect explicit messages acknowledgements once delivered true BOOL Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"3.0.4"},{"location":"api/3.0.4/#api-docs-v304","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.4"},{"location":"api/3.0.4/#sink","text":"","title":"Sink"},{"location":"api/3.0.4/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/3.0.4/#source","text":"","title":"Source"},{"location":"api/3.0.4/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , auto.ack= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No auto.ack If this parameter is set to false , the server should expect explicit messages acknowledgements once delivered true BOOL Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/3.0.5/","text":"API Docs - v3.0.5 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , auto.ack= BOOL , consumer.threadpool.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No auto.ack If this parameter is set to false , the server should expect explicit messages acknowledgements once delivered true BOOL Yes No consumer.threadpool.size The number of consumer threads to be registered 1 INT Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"3.0.5"},{"location":"api/3.0.5/#api-docs-v305","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.5"},{"location":"api/3.0.5/#sink","text":"","title":"Sink"},{"location":"api/3.0.5/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/3.0.5/#source","text":"","title":"Source"},{"location":"api/3.0.5/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , auto.ack= BOOL , consumer.threadpool.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No auto.ack If this parameter is set to false , the server should expect explicit messages acknowledgements once delivered true BOOL Yes No consumer.threadpool.size The number of consumer threads to be registered 1 INT Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/3.0.6/","text":"API Docs - v3.0.6 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , auto.ack= BOOL , consumer.threadpool.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No auto.ack If this parameter is set to false , the server should expect explicit messages acknowledgements once delivered true BOOL Yes No consumer.threadpool.size The number of consumer threads to be registered 1 INT Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"3.0.6"},{"location":"api/3.0.6/#api-docs-v306","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.6"},{"location":"api/3.0.6/#sink","text":"","title":"Sink"},{"location":"api/3.0.6/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/3.0.6/#source","text":"","title":"Source"},{"location":"api/3.0.6/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , auto.ack= BOOL , consumer.threadpool.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No auto.ack If this parameter is set to false , the server should expect explicit messages acknowledgements once delivered true BOOL Yes No consumer.threadpool.size The number of consumer threads to be registered 1 INT Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/3.0.7/","text":"API Docs - v3.0.7 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , auto.ack= BOOL , consumer.threadpool.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No auto.ack If this parameter is set to false , the server should expect explicit messages acknowledgements once delivered true BOOL Yes No consumer.threadpool.size The number of consumer threads to be registered 1 INT Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"3.0.7"},{"location":"api/3.0.7/#api-docs-v307","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.7"},{"location":"api/3.0.7/#sink","text":"","title":"Sink"},{"location":"api/3.0.7/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/3.0.7/#source","text":"","title":"Source"},{"location":"api/3.0.7/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , auto.ack= BOOL , consumer.threadpool.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No auto.ack If this parameter is set to false , the server should expect explicit messages acknowledgements once delivered true BOOL Yes No consumer.threadpool.size The number of consumer threads to be registered 1 INT Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"},{"location":"api/latest/","text":"API Docs - v3.0.7 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Sink rabbitmq (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key. Source rabbitmq (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , auto.ack= BOOL , consumer.threadpool.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No auto.ack If this parameter is set to false , the server should expect explicit messages acknowledgements once delivered true BOOL Yes No consumer.threadpool.size The number of consumer threads to be registered 1 INT Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"latest"},{"location":"api/latest/#api-docs-v307","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.7"},{"location":"api/latest/#sink","text":"","title":"Sink"},{"location":"api/latest/#rabbitmq-sink","text":"The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol Syntax @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it sends.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No Yes exchange.type The type of the exchange.name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts direct STRING Yes Yes exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes Yes exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes Yes delivery.mode This determines whether the connection should be persistent or not. The value must be either 1 or 2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. 1 INT Yes No content.type The message content type. This should be the MIME content type. null STRING Yes No content.encoding The message content encoding. The value should be MIME content encoding. null STRING Yes No priority Specify a value within the range 0 to 9 in this parameter to indicate the message priority. 0 INT Yes Yes correlation.id The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. null STRING Yes Yes reply.to This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the reply.to property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). null STRING Yes No expiration The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. null STRING Yes No message.id The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. null STRING Yes Yes timestamp Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is dd/mm/yyyy . current timestamp STRING Yes No type The type of the message. e.g., The type of the event or the command represented by the message. null STRING Yes No user.id The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. null STRING Yes No app.id The identifier of the application that produced the message. null STRING Yes No routing.key The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. empty STRING Yes Yes headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes Yes tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that sends the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query publishes events to the direct exchange with the direct exchange type and the directTest routing key.","title":"rabbitmq (Sink)"},{"location":"api/latest/#source","text":"","title":"Source"},{"location":"api/latest/#rabbitmq-source","text":"The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. Syntax @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , auto.ack= BOOL , consumer.threadpool.size= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic uri The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 STRING No No heartbeat The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. 60 INT Yes No exchange.name The name of the exchange that decides what to do with a message it receives.If the exchange.name already exists in the RabbitMQ server, then the system uses that exchange.name instead of redeclaring. STRING No No exchange.type The type of the exchange name. The exchange types available are direct , fanout , topic and headers . For a detailed description of each type, see RabbitMQ - AMQP Concepts . direct STRING Yes No exchange.durable.enabled If this is set to true , the exchange remains declared even if the broker restarts. false BOOL Yes No exchange.autodelete.enabled If this is set to true , the exchange is automatically deleted when it is not used anymore. false BOOL Yes No routing.key The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the exchange.type parameter is direct or topic . empty STRING Yes No headers The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. null STRING Yes No queue.name A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. system generated queue name STRING Yes No queue.durable.enabled If this parameter is set to true , the queue remains declared even if the broker restarts false BOOL Yes No queue.exclusive.enabled If this parameter is set to true , the queue is exclusive for the current connection. If it is set to false , it is also consumable by other connections. false BOOL Yes No queue.autodelete.enabled If this parameter is set to true , the queue is automatically deleted when it is not used anymore. false BOOL Yes No tls.enabled This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to true , the tls.truststore.path and tls.truststore.password parameters are initialized. false BOOL Yes No tls.truststore.path The file path to the location of the truststore of the client that receives the RabbitMQ events via the AMQP protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ${carbon.home}/resources/security directory. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No tls.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses wso2carbon as the default password. wso2carbon STRING Yes No tls.truststore.type The type of the truststore. JKS STRING Yes No tls.version The version of the tls/ssl. SSL STRING Yes No auto.ack If this parameter is set to false , the server should expect explicit messages acknowledgements once delivered true BOOL Yes No consumer.threadpool.size The number of consumer threads to be registered 1 INT Yes No Examples EXAMPLE 1 @App:name('TestExecutionPlan') define stream FooStream (symbol string, price float, volume long); @info(name = 'query1') @source(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', @map(type='xml')) Define stream BarStream (symbol string, price float, volume long); from FooStream select symbol, price, volume insert into BarStream; This query receives events from the direct exchange with the direct exchange type, and the directTest routing key.","title":"rabbitmq (Source)"}]}